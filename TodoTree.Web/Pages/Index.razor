@page "/"

@using System.Timers
@using System.Collections.Specialized
@using TodoTree.PluginInfra
@inject TodoServiceClient TodoRepository
@inject DialogService DialogService

@if (todos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <RadzenButton Icon="add_task" Click="e=>Add()" />
        <RadzenCheckBox TValue="bool" @bind-Value="showCompleted" />完了済みを表示
        <RadzenCheckBox TValue="bool" @bind-Value="editable" />編集
    </div>
    <div>
        <RadzenTree Style="width: 100%" Data="showTodo">
            <RadzenTreeLevel TextProperty="@nameof(Todo.Name)"
                ChildrenProperty="@(showCompleted?nameof(Todo.Children):nameof(Todo.UncompletedChildren))"
                HasChildren="@(e => ((e as Todo).Children?.Any()??false))">
                <Template>
                    @{
                    var todo = (context.Value as Todo);
                }

                <div class="form">

                    @if (!todo.HasChildren)
                    {
                        <div class="head-padding"></div>
                    }
                    @if(editable){
                       <RadzenButton Icon="add_task" Click="() => AddChild(todo)" /> 
                    }
                    @if (todo.IsRunning)
                    {
                        <RadzenButton Disabled="todo.Compleated" Icon="pause" Click="() => Stop(todo)" />
                    }
                    else
                    {
                        <RadzenButton Disabled="todo.Compleated" Icon="play_arrow" Click="() => Start(todo)" />
                    }
                    <RadzenCheckBox @bind-value="@todo.Compleated" TValue="bool" Change="(state) => ToggleComplete(state, todo)" />
                    <div class="name">
                        @if(editable){
                            <RadzenTextBox Style="width: 100%" @bind-value="todo.Name" Change="value => ChangeName(todo, value)" />
                        }else{
                            @todo.Name
                        }
                    </div>
                    <div class="estimate-time">
                        @if(editable){
                            <RadzenDatePicker  Disabled="todo.HasChildren" TValue="DateTime?" DateFormat="HH:mm" TimeOnly="true"
                            ShowTime="true" Value="DateTime.Today + todo.EstimateTime"
                            Change="(datetime) => ChangeEstimateTime(todo, datetime)" />
                        }else{
                            @todo.EstimateTime.ToString(@"hh\:mm\:ss")
                        }
                    </div>
                    <span>@todo.RemainingTime.ToString(@"hh\:mm\:ss")</span>
                    @if(editable){
                        @if (!todo.HasChildren)
                        {
                            <RadzenButton Icon="delete" Click="() => Delete(todo)" />
                        } else {
                            <RadzenButton Icon="delete_forever" Click="() => DeleteAllChildren(todo)" />
                        }
                    }
                    <RadzenButton Icon="access_time" Click="() => OpenTimeRecords(todo)" />
                </div>

            </Template>
        </RadzenTreeLevel>
    </RadzenTree>
</div>
}

@code{
    private Todo[] todos;
    private Timer timer;

    private IEnumerable<Todo> showTodo => showCompleted ? todos : todos?.Where(todo => !todo.Compleated);

    private bool showCompleted;
    private bool editable;

    protected override async Task OnInitializedAsync()
    {
        todos = TodoRepository.GetTopTodos().ToArray();
        timer = new Timer(1000);
        timer.AutoReset = true;
        timer.Elapsed += async (sender, args) => await InvokeAsync(() => StateHasChanged());
        timer.Start();
    }

    private bool CheckShow(Todo todo)
    {
        return showCompleted || !todo.Compleated;
    }

    private async Task Add()
    {
        await TodoRepository.Upsert(new Todo("TodoItem", TimeSpan.Zero, Enumerable.Empty<TimeRecord>(), new Dictionary<string,string>()));
        todos = TodoRepository.GetTopTodos().ToArray();
    }

    private async Task ChangeName(Todo todo, string name)
    {
        await TodoRepository.Upsert(todo);
        todos = TodoRepository.GetTopTodos().ToArray();
    }

    public async Task ChangeEstimateTime(Todo todo, DateTime? dateTime)
    {
        if (!todo.HasChildren)
        {
            todo.EstimateTime = dateTime?.TimeOfDay ?? TimeSpan.Zero;
            await TodoRepository.Upsert(todo);
        }
    }

    private async Task Start(Todo todo)
    {
        await TodoRepository.Start(todo);
        todos = TodoRepository.GetTopTodos().ToArray();
    }

    private async Task Stop(Todo todo)
    {
        await TodoRepository.Stop(todo);
        todos = TodoRepository.GetTopTodos().ToArray();
    }

    private async Task ToggleComplete(bool state, Todo todo){
        Console.WriteLine("toggle");
        if(!state){
            await TodoRepository.Unomplete(todo);
            Console.WriteLine("UnComplete");
        }else{
            await TodoRepository.Complete(todo);
            Console.WriteLine("Complete");
        }
        todos = TodoRepository.GetTopTodos().ToArray();
    }

    protected async Task AddChild(Todo todo)
    {
        todo.AddChild();
        await TodoRepository.Upsert(todo);
        todos = TodoRepository.GetTopTodos().ToArray();

    }

    private async Task DeleteAllChildren(Todo todo)
    {
        todo.DeleteAllChildren();
        await TodoRepository.Upsert(todo);
        todos = TodoRepository.GetTopTodos().ToArray();

    }

    private async Task Delete(Todo todo)
    {
        await TodoRepository.Delete(todo);
        todos = TodoRepository.GetTopTodos().ToArray();

    }

    private void OpenTimeRecords(Todo todo){
        DialogService.Open<TimeRecords>($"Time Record [{todo.Name}]",
                        new Dictionary<string, object>() { { "TodoId", todo.Id } },
                        new DialogOptions(){ Width = "700px", Height = "530px" });
    }

}