@page "/fetchdata"

@using TodoTree.Web.Data
@inject TodoRepository TodoRepository

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (todos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="Add">Add</button>
    <RadzenTree Data="todos">
        <RadzenTreeLevel TextProperty="@nameof(Todo.Name)" ChildrenProperty="@nameof(Todo.Children)" HasChildren="@(e => (e as Todo).Children?.Any()??false)">
            <Template>
                @{
                    var todo = (context.Value as Todo);
                }
                @if (todo.IsRunning)
                {
                    <RadzenButton Disabled="todo.Compleated" Click="() => Stop(todo)">Stop</RadzenButton>
                }
                else
                {
                    <RadzenButton Disabled="todo.Compleated" Click="() => Start(todo)">Start</RadzenButton>
                }
                @if (todo.Compleated)
                {
                    <RadzenButton Click="() => UnComplete(todo)">UnCompleted</RadzenButton>
                }
                else
                {
                    <RadzenButton Click="() => Complete(todo)">Complete</RadzenButton>
                }
                <RadzenTextBox @bind-value="todo.Name" Change="value => ChangeName(todo, value)" />
                <RadzenDatePicker Disabled="todo.HasChildren" TValue="DateTime?" TimeOnly="true" ShowTime="true" Value="DateTime.Today + todo.EstimateTime" Change="(datetime) => ChangeEstimateTime(todo, datetime)"></RadzenDatePicker>
                <span>@todo.RemainingTime.ToString()</span>
                <RadzenButton Text="Delete" Click="()=> Delete(todo)"></RadzenButton>
                <RadzenButton Text="DeleteAllChildren" Click="()=>DeleteAllChildren(todo)"></RadzenButton>
                <RadzenButton Text="AddChildren" Click="()=>AddChild(todo)"></RadzenButton>
            </Template>
        </RadzenTreeLevel>
    </RadzenTree>

}

@code {
    private Todo[] todos;

    protected override async Task OnInitializedAsync()
    {
        todos = TodoRepository.GetTopTodo().ToArray();
    }

    private void Add()
    {
        TodoRepository.AddOrUpdate(new Todo("TodoItem", TimeSpan.Zero, Enumerable.Empty<TimeRecord>()));
        todos = TodoRepository.GetTopTodo().ToArray();
    }

    private void ChangeName(Todo todo, string name)
    {
        TodoRepository.AddOrUpdate(todo);
    }

    public void ChangeEstimateTime(Todo todo, DateTime? dateTime)
    {
        if (!todo.HasChildren)
        {
            todo.EstimateTime = dateTime?.TimeOfDay ?? TimeSpan.Zero;
            TodoRepository.AddOrUpdate(todo);
        }
    }

    private void Start(Todo todo)
    {
        todo.Start();
        TodoRepository.AddOrUpdate(todo);
    }

    private void Stop(Todo todo)
    {
        todo.Stop();
        TodoRepository.AddOrUpdate(todo);
    }

    private void Complete(Todo todo)
    {
        todo.Complete();
        TodoRepository.AddOrUpdate(todo);
    }

    private void UnComplete(Todo todo)
    {
        todo.UnComplete();
        TodoRepository.AddOrUpdate(todo);

    }

    protected void AddChild(Todo todo)
    {
        todo.AddChild();
        TodoRepository.AddOrUpdate(todo);
        todos = TodoRepository.GetTopTodo().ToArray();

    }

    private void DeleteAllChildren(Todo todo)
    {
        todo.DeleteAllChildren();
        TodoRepository.AddOrUpdate(todo);
        todos = TodoRepository.GetTopTodo().ToArray();

    }

    private void Delete(Todo todo)
    {
        TodoRepository.Delete(todo);
        todos = TodoRepository.GetTopTodo().ToArray();

    }
}
